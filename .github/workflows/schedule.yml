name: Daily BNR Data Collection

on:
  schedule:
    - cron: '30 10 * * *'  # Runs at 13:30 Romania time (10:30 UTC)
  workflow_dispatch:      # Manual trigger remains available
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    timeout-minutes: 15
    
    strategy:
      matrix:
        python-version: ['3.9', '3.10', '3.11']

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Run unit tests
        run: |
          python3 run_tests.py --mode unit --coverage --html || echo "Tests failed, continuing..."

      - name: Run integration tests
        run: |
          python3 run_tests.py --mode integration || echo "Integration tests failed, continuing..."

      - name: Run code quality checks
        continue-on-error: true
        run: |
          python3 -m flake8 main.py tests/ || true
          python3 -m mypy main.py || true
          python3 -m black --check main.py tests/ || true

      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-results-${{ matrix.python-version }}
          path: |
            htmlcov/
            test-results.html
            test-results.json
            coverage.xml

  security-scan:
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Run security scan
        run: |
          pip install bandit safety
          bandit -r . -f json -o bandit-report.json
          safety check --json --output safety-report.json

      - name: Upload security reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: security-reports
          path: |
            bandit-report.json
            safety-report.json

  run-script:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    needs: [test, security-scan]
    if: github.event_name == 'schedule' || github.event_name == 'workflow_dispatch'

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          cache: 'pip'

      - name: Install dependencies
        run: |
          python3 -m pip install --upgrade pip
          pip3 install -r requirements.txt

      - name: Run tests before execution
        run: |
          python3 run_tests.py --mode unit || echo "Tests failed, continuing anyway..."

      - name: Log run time
        run: |
          echo "Workflow started at: $(date)"
          echo "Python version: $(python3 --version)"
          echo "Pip version: $(pip3 --version)"

      - name: Run script
        run: |
          python3 main.py || exit 0  # Don't fail the workflow if data isn't available

      - name: Upload logs (on failure)
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: error-logs
          path: |
            *.log
            bandit-report.json
            safety-report.json
